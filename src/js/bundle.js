!function(e){var n={};function t(o){if(n[o])return n[o].exports;var r=n[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,t),r.l=!0,r.exports}t.m=e,t.c=n,t.d=function(e,n,o){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:o})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(t.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var r in e)t.d(o,r,function(n){return e[n]}.bind(null,r));return o},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="",t(t.s=0)}([function(e,n,t){e.exports=t(1)},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});class o extends HTMLElement{constructor(){super(),this._mask="",this._correctNumber="+7(985)077-**-**",this._inputsMaskArr=[],this._template=document.createElement("template").innerHTML='\n\n            <style>\n                .phone-module {\n                    display: flex;\n                    flex-wrap: wrap;\n\n                    width: 370px;\n                    height: 50px;\n\n                    font-family: Arial, Helvetica, sans-serif;\n                    color: #333333;\n                    font-size: 20px;\n\n                    justify-content: space-around;\n                }\n\n                .phone-module__number-section {\n                    display: flex;\n                    flex-wrap: wrap;\n\n                    width: 100%;\n                    height: 35px;\n\n                    justify-content: space-around;\n                }\n\n                .phone-module__error-section {\n                    width: 100%;\n\n                    text-align: left;\n                    font-size: 14px;\n                    font-family: Arial, Helvetica, sans-serif;\n                    color: #ff1100;\n                }\n\n                .phone-module__number-section-symbol {\n                    text-align: center;\n                    line-height: 32px;\n\n                    width: 10px;\n                    height: 32px;\n\n                    border: none;\n                }\n\n                .phone-module__number-section-cell {\n                    width: 25px;\n                    height: 32px;\n\n                    text-align: center;\n                    line-height: 32px;\n\n                    background-color: #f0f0f0;\n\n                    margin: 2px;\n                    border-radius: 2px;\n                }\n\n                .phone-module__number-section-input,\n                .phone-module__number-section-input-error,\n                .phone-module__error-section-input-success {\n                    text-align: left;\n                    line-height: 32px;\n\n                    width: 17px;\n                    height: 28px;\n\n                    margin: 2px;\n                    padding-left: 6px;\n\n                    font-family: Arial, Helvetica, sans-serif;\n                    color: #333333;\n                    font-size: 20px;\n\n                    background-color: #ffffff;\n\n                    outline: none;\n\n                    border: 1px solid #f0f0f0;\n                    border-radius: 2px;\n\n                    transition: 0.1s linear;\n                }\n\n                .phone-module__number-section-input-error {\n                    border-color: #ff1100;\n                }\n\n                .phone-module__error-section-input-success {\n                    border-color: #00ff6a;\n                }\n\n                .phone-module__number-section-input:focus {\n                    border: 1px solid #858585;\n                    border-radius: 2px;\n\n                    transition: 0.1s linear;\n                }\n            </style>\n\n            <div class="phone-module">\n                <div class="phone-module__number-section"></div>\n                <div class="phone-module__error-section"></div>\n            </div>\n        ',this.attachShadow({mode:"open"}),this.shadowRoot&&(this.shadowRoot.innerHTML=this._template,this._numberSection=this.shadowRoot.querySelector(".phone-module__number-section"),this._errorSection=this.shadowRoot.querySelector(".phone-module__error-section"))}logic(){if(this._numberSection){let e=1;for(let n=0;n<this._mask.length;n++)switch(this._mask[n]){case"+":case"(":case")":case"-":{const e=document.createElement("div");e.className="phone-module__number-section-symbol",e.innerText=this._mask[n],this._numberSection.appendChild(e);break}case"I":{const t=document.createElement("input");t.className="phone-module__number-section-input",t.id=String(e),t.placeholder="_",this._numberSection.appendChild(t),this._inputsMaskArr.push(n),e++;break}case"*":{const e=document.createElement("div");e.className="phone-module__number-section-cell",e.innerText="•",e.style.fontSize="25px",this._numberSection.appendChild(e);break}case"X":default:{const e=document.createElement("div");e.className="phone-module__number-section-cell",e.innerText=this._mask[n],this._numberSection.appendChild(e);break}}const n=[],t=e;let o;if(this.shadowRoot)for(let t=1;t<=e;t++)(o=this.shadowRoot.getElementById(String(t)))&&n.push(o);const r=new RegExp("^[0-9]+$");for(let e=0;e<t;e++)n[e]&&n[e].addEventListener("input",()=>{n[e].className="phone-module__number-section-input",r.test(n[e].value)?(n[e].value.length>1&&(n[e].value=n[e].value[n[e].value.length-1]),Number(n[e].id)<t-1&&this.shadowRoot&&n[e+1].focus(),"phone-module__number-section-input-error"===n[e].className&&(n[e].className="phone-module__number-section-input")):n[e].value.length>=2?isNaN(Number(n[e].value))?n[e].value=n[e].value[1]:n[e].value=n[e].value[0]:n[e].value=""});this.shadowRoot&&document.addEventListener("keypress",e=>{if(13===e.keyCode){let e=!1;if(this._errorSection){this._errorSection.textContent="";for(let o=0;o<t;o++)if(this.shadowRoot&&n[o]){if(""===n[o].value)return this._errorSection.textContent="Все поля должны быть заполены",void(n[o].className="phone-module__number-section-input-error");n[o].value!==this._correctNumber[this._inputsMaskArr[o]]&&(e=!0)}if(e){for(let e=0;e<t;e++)this.shadowRoot&&n[e]&&(n[e].className="phone-module__number-section-input-error");this._errorSection.textContent="Неверный номер, попробуйте еще раз"}else for(let e=0;e<t;e++)this.shadowRoot&&n[e]&&(n[e].className="phone-module__error-section-input-success")}}})}}set setMask(e){this._mask=e.mask,this.logic()}get getMask(){return this._mask}}n.PhoneValidationComponent=o,customElements.define("phone-validation",o);const r=document.getElementById("7");if(r){const e={mask:"+7(985)0II-**-**"};r.setMask=e}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,