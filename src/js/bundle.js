!function(e){var t={};function o(n){if(t[n])return t[n].exports;var s=t[n]={i:n,l:!1,exports:{}};return e[n].call(s.exports,s,s.exports,o),s.l=!0,s.exports}o.m=e,o.c=t,o.d=function(e,t,n){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)o.d(n,s,function(t){return e[t]}.bind(null,s));return n},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="",o(o.s=0)}([function(e,t,o){o(1),e.exports=o(2)},function(e,t,o){"use strict";customElements.define("phone-validation",class extends HTMLElement{constructor(){super(),this._mask="",this._correctNumber="+7(985)077-**-**",this._inputsMaskArr=[],this.template=document.createElement("template").innerHTML='\n        <div class="phone-module">\n            <div class="phone-module__number-section"></div>\n            <div class="phone-module__error-section"></div>\n        </div>\n    ',this.attachShadow({mode:"open"}),this.shadowRoot&&(this.shadowRoot.innerHTML=this.template,this._numberSection=this.shadowRoot.querySelector(".phone-module__number-section"),this._errorSection=this.shadowRoot.querySelector(".phone-module__error-section"))}logic(){if(console.log("step 2"),this.shadowRoot&&(this._numberSection=this.shadowRoot.querySelector(".phone-module__number-section"),this._errorSection=this.shadowRoot.querySelector(".phone-module__error-section")),this._numberSection){let e=1;console.log("step 3");for(let t=0;t<this._mask.length;t++)switch(this._mask[t]){case"+":case"(":case")":case"-":{let e=document.createElement("div");e.className="phone-module__number-section-symbol",e.innerText=this._mask[t],this._numberSection.appendChild(e);break}case"I":{let o=document.createElement("input");o.className="phone-module__number-section-input",o.id=String(e),o.placeholder="_",this._numberSection.appendChild(o),this._inputsMaskArr.push(t),e++;break}case"*":{let e=document.createElement("div");e.className="phone-module__number-section-cell",e.innerText="•",e.style.fontSize="25px",this._numberSection.appendChild(e);break}case"X":default:{let e=document.createElement("div");e.className="phone-module__number-section-cell",e.innerText=this._mask[t],this._numberSection.appendChild(e);break}}let t=[],o=e;for(let o=1;o<=e;o++){let e=document.getElementById(String(o));e&&t.push(e)}let n=new RegExp("^[0-9]+$");console.log(this._mask);for(let e=0;e<t.length;e++)t[e].addEventListener("input",()=>{if(t[e].className="phone-module__number-section-input",n.test(t[e].value)){if(t[e].value.length>1&&(t[e].value=t[e].value[t[e].value.length-1]),Number(t[e].id)<o){let o=document.getElementById(String(Number(t[e].id)+1));o&&o.focus()}"phone-module__number-section-input-error"==t[e].className&&(t[e].className="phone-module__number-section-input")}else console.log(t[e].value,parseInt(t[e].value)),t[e].value.length>=2?isNaN(Number(t[e].value))?(console.log(t[e].value),t[e].value=t[e].value[1]):(console.log("da"),t[e].value=t[e].value[0]):t[e].value=""});console.log("step 4"),document.addEventListener("keypress",e=>{if(console.log("step 5:",e.keyCode),13==e.keyCode){console.log("da");let e=!1;if(this._errorSection){this._errorSection.textContent="";for(let t=0;t<o;t++){let o=document.getElementById(String(t+1));if(o){if(""==o.value)return this._errorSection.textContent="Все поля должны быть заполены",void(o.className="phone-module__number-section-input-error");o.value!=this._correctNumber[this._inputsMaskArr[t]]&&(console.log(o,"cur: ",o.value,"ist: ",this._correctNumber[this._inputsMaskArr[t]]),e=!0)}}let t;if(e){for(let e=0;e<o;e++)(t=document.getElementById(String(e+1)))&&(t.className="phone-module__number-section-input-error");this._errorSection.textContent="Неверный номер, попробуйте еще раз"}else for(let e=0;e<o;e++)(t=document.getElementById(String(e+1)))&&(t.className="phone-module__error-section-input-success")}}})}else console.log("root",this.shadowRoot,"elem",this._numberSection)}set setMask(e){this._mask=e._mask,console.log("step1"),this.logic()}get getMask(){return this._mask}});var n=document.getElementById("7");if(n){let e={_mask:"+7(985)0II-**-**"};n.setMask=e,console.log("wtf")}else console.log("err")},function(e,t){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,