!function(e){var t={};function o(n){if(t[n])return t[n].exports;var s=t[n]={i:n,l:!1,exports:{}};return e[n].call(s.exports,s,s.exports,o),s.l=!0,s.exports}o.m=e,o.c=t,o.d=function(e,t,n){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)o.d(n,s,function(t){return e[t]}.bind(null,s));return n},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="",o(o.s=0)}([function(e,t,o){e.exports=o(1)},function(e,t,o){"use strict";customElements.define("phone-validation",class extends HTMLElement{constructor(){super(),this._mask="",this._correctNumber="+7(985)077-**-**",this._inputsMaskArr=[],this.template=document.createElement("template").innerHTML='\n            <div class="phone-module">\n                <div class="phone-module__number-section"></div>\n                <div class="phone-module__error-section"></div>\n            </div>\n        ',this.attachShadow({mode:"open"}),this.shadowRoot&&(this.shadowRoot.innerHTML=this.template,this._numberSection=this.shadowRoot.querySelector(".phone-module__number-section"),this._errorSection=this.shadowRoot.querySelector(".phone-module__error-section"))}logic(){if(console.log("step 2"),this.shadowRoot&&(this._numberSection=this.shadowRoot.querySelector(".phone-module__number-section"),this._errorSection=this.shadowRoot.querySelector(".phone-module__error-section")),this._numberSection){let e=1;console.log("step 3");for(let t=0;t<this._mask.length;t++)switch(this._mask[t]){case"+":case"(":case")":case"-":{let e=document.createElement("div");e.className="phone-module__number-section-symbol",e.innerText=this._mask[t],this._numberSection.appendChild(e);break}case"I":{let o=document.createElement("input");o.className="phone-module__number-section-input",o.id=String(e),o.placeholder="_",this._numberSection.appendChild(o),this._inputsMaskArr.push(t),e++;break}case"*":{let e=document.createElement("div");e.className="phone-module__number-section-cell",e.innerText="•",e.style.fontSize="25px",this._numberSection.appendChild(e);break}case"X":default:{let e=document.createElement("div");e.className="phone-module__number-section-cell",e.innerText=this._mask[t],this._numberSection.appendChild(e);break}}let t=[],o=e;for(let o=1;o<=e;o++){let e=document.getElementById(String(o));e&&t.push(e)}let n=new RegExp("^[0-9]+$");console.log(this._mask);for(let e=0;e<t.length;e++)t[e].addEventListener("input",()=>{if(t[e].className="phone-module__number-section-input",n.test(t[e].value)){if(t[e].value.length>1&&(t[e].value=t[e].value[t[e].value.length-1]),Number(t[e].id)<o){let o=document.getElementById(String(Number(t[e].id)+1));o&&o.focus()}"phone-module__number-section-input-error"==t[e].className&&(t[e].className="phone-module__number-section-input")}else console.log(t[e].value,parseInt(t[e].value)),t[e].value.length>=2?isNaN(Number(t[e].value))?(console.log(t[e].value),t[e].value=t[e].value[1]):(console.log("da"),t[e].value=t[e].value[0]):t[e].value=""});console.log("step 4"),document.addEventListener("keypress",e=>{if(console.log("step 5:",e.keyCode),13==e.keyCode){console.log("da");let e=!1;if(this._errorSection){this._errorSection.textContent="";for(let t=0;t<o;t++){let o=document.getElementById(String(t+1));if(o){if(""==o.value)return this._errorSection.textContent="Все поля должны быть заполены",void(o.className="phone-module__number-section-input-error");o.value!=this._correctNumber[this._inputsMaskArr[t]]&&(console.log(o,"cur: ",o.value,"ist: ",this._correctNumber[this._inputsMaskArr[t]]),e=!0)}}if(e){for(let e=0;e<o;e++){let t=document.getElementById(String(e+1));t&&(t.className="phone-module__number-section-input-error")}this._errorSection.textContent="Неверный номер, попробуйте еще раз"}else for(let e=0;e<o;e++){let t=document.getElementById(String(e+1));t&&(t.className="phone-module__error-section-input-success")}}}})}else console.log("root",this.shadowRoot,"elem",this._numberSection)}set setMask(e){this._mask=e.mask,console.log("step1"),this.logic()}get getMask(){return this._mask}});var n=document.getElementById("7");if(n){let e={mask:"+7(985)0II-**-**"};n.setMask=e,console.log("wtf")}else console.log("err")}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RzL2luZGV4LnRzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiY3VzdG9tRWxlbWVudHMiLCJkZWZpbmUiLCJIVE1MRWxlbWVudCIsIltvYmplY3QgT2JqZWN0XSIsInN1cGVyIiwidGhpcyIsIl9tYXNrIiwiX2NvcnJlY3ROdW1iZXIiLCJfaW5wdXRzTWFza0FyciIsInRlbXBsYXRlIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiaW5uZXJIVE1MIiwiYXR0YWNoU2hhZG93Iiwic2hhZG93Um9vdCIsIl9udW1iZXJTZWN0aW9uIiwicXVlcnlTZWxlY3RvciIsIl9lcnJvclNlY3Rpb24iLCJjb25zb2xlIiwibG9nIiwiaWQiLCJsZW5ndGgiLCJjZWxsIiwiY2xhc3NOYW1lIiwiaW5uZXJUZXh0IiwiYXBwZW5kQ2hpbGQiLCJTdHJpbmciLCJwbGFjZWhvbGRlciIsInB1c2giLCJzdHlsZSIsImZvbnRTaXplIiwiaW5wdXRzQXJyIiwiaW5wdXRzQ29sIiwiaW5wdXQiLCJnZXRFbGVtZW50QnlJZCIsInJnIiwiUmVnRXhwIiwiYWRkRXZlbnRMaXN0ZW5lciIsInRlc3QiLCJOdW1iZXIiLCJuZXh0SW5wdXQiLCJmb2N1cyIsInBhcnNlSW50IiwiaXNOYU4iLCJldmVudCIsImtleUNvZGUiLCJlcnJDaGVjayIsInRleHRDb250ZW50Iiwic2V0TWFzayIsInByb3AiLCJtYXNrIiwibG9naWMiLCJnZXRNYXNrIiwiYSJdLCJtYXBwaW5ncyI6ImFBQ0EsSUFBQUEsRUFBQSxHQUdBLFNBQUFDLEVBQUFDLEdBR0EsR0FBQUYsRUFBQUUsR0FDQSxPQUFBRixFQUFBRSxHQUFBQyxRQUdBLElBQUFDLEVBQUFKLEVBQUFFLEdBQUEsQ0FDQUcsRUFBQUgsRUFDQUksR0FBQSxFQUNBSCxRQUFBLElBVUEsT0FOQUksRUFBQUwsR0FBQU0sS0FBQUosRUFBQUQsUUFBQUMsSUFBQUQsUUFBQUYsR0FHQUcsRUFBQUUsR0FBQSxFQUdBRixFQUFBRCxRQUtBRixFQUFBUSxFQUFBRixFQUdBTixFQUFBUyxFQUFBVixFQUdBQyxFQUFBVSxFQUFBLFNBQUFSLEVBQUFTLEVBQUFDLEdBQ0FaLEVBQUFhLEVBQUFYLEVBQUFTLElBQ0FHLE9BQUFDLGVBQUFiLEVBQUFTLEVBQUEsQ0FBMENLLFlBQUEsRUFBQUMsSUFBQUwsS0FLMUNaLEVBQUFrQixFQUFBLFNBQUFoQixHQUNBLG9CQUFBaUIsZUFBQUMsYUFDQU4sT0FBQUMsZUFBQWIsRUFBQWlCLE9BQUFDLFlBQUEsQ0FBd0RDLE1BQUEsV0FFeERQLE9BQUFDLGVBQUFiLEVBQUEsY0FBaURtQixPQUFBLEtBUWpEckIsRUFBQXNCLEVBQUEsU0FBQUQsRUFBQUUsR0FFQSxHQURBLEVBQUFBLElBQUFGLEVBQUFyQixFQUFBcUIsSUFDQSxFQUFBRSxFQUFBLE9BQUFGLEVBQ0EsS0FBQUUsR0FBQSxpQkFBQUYsUUFBQUcsV0FBQSxPQUFBSCxFQUNBLElBQUFJLEVBQUFYLE9BQUFZLE9BQUEsTUFHQSxHQUZBMUIsRUFBQWtCLEVBQUFPLEdBQ0FYLE9BQUFDLGVBQUFVLEVBQUEsV0FBeUNULFlBQUEsRUFBQUssVUFDekMsRUFBQUUsR0FBQSxpQkFBQUYsRUFBQSxRQUFBTSxLQUFBTixFQUFBckIsRUFBQVUsRUFBQWUs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QUFPLENBQ1AsR0FBbUIsSUFBZkEsRUFBTWhELE1BR04sT0FGQW9CLEtBQUtZLGNBQWM4QixZQUFjLHFDQUNqQ2QsRUFBTVYsVUFBWSw0Q0FHbEJVLEVBQU1oRCxPQUFTb0IsS0FBS0UsZUFBZUYsS0FBS0csZUFBZXhDLE1BQ3ZEa0QsUUFBUUMsSUFBSWMsRUFBTyxRQUFTQSxFQUFNaEQsTUFBTyxRQUFTb0IsS0FBS0UsZUFBZUYsS0FBS0csZUFBZXhDLEtBQzFGOEUsR0FBVyxJQUl2QixHQUFJQSxFQUFVLENBQ1YsSUFBSyxJQUFJOUUsRUFBSSxFQUFHQSxFQUFJZ0UsRUFBV2hFLElBQUssQ0FDaEMsSUFBSWlFLEVBQTBCdkIsU0FBU3dCLGVBQWVSLE9BQU8xRCxFQUFJLElBQzdEaUUsSUFDQUEsRUFBTVYsVUFBWSw0Q0FHMUJsQixLQUFLWSxjQUFjOEIsWUFBYywwQ0FHakMsSUFBSyxJQUFJL0UsRUFBSSxFQUFHQSxFQUFJZ0UsRUFBV2hFLElBQUssQ0FDaEMsSUFBSWlFLEVBQTBCdkIsU0FBU3dCLGVBQWVSLE9BQU8xRCxFQUFJLElBQzdEaUUsSUFDQUEsRUFBTVYsVUFBWSx1REFTMUNMLFFBQVFDLElBQUksT0FBUWQsS0FBS1MsV0FBWSxPQUFRVCxLQUFLVSxnQkFHMURpQyxZQUFZQyxHQUNSNUMsS0FBS0MsTUFBUTJDLEVBQUtDLEtBQ2xCaEMsUUFBUUMsSUFBSSxTQUNaZCxLQUFLOEMsUUFFVEMsY0FDSSxPQUFPL0MsS0FBS0MsU0FJcEIsSUFBSStDLEVBQThCM0MsU0FBU3dCLGVBQWUsS0FDMUQsR0FBSW1CLEVBQUcsQ0FDSCxJQUFJdkQsRUFBSSxDQUNKb0QsS0FBTSxvQkFFVkcsRUFBRUwsUUFBVWxELEVBQ1pvQixRQUFRQyxJQUFJLFlBSVpELFFBQVFDLElBQUkiLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDApO1xuIiwiaW50ZXJmYWNlIFByb3BzIHtcbiAgICAvKipcbiAgICAgKiDQnNCw0YHQutCwINC40L3Qv9GD0YLQsC4g0JfQvdCw0YfQtdC90LjRjzpcbiAgICAgKiBcIklcIiAtINC+0LTQuNC90L7Rh9C90YvQuSDQuNC90L/Rg9GCINC00LvRjyDQstCy0L7QtNCwINC+0LTQvdC+0Lkg0YbQuNGE0YDRi1xuICAgICAqIFwiWFwiIC0g0YHQtdGA0YvQuSDQsdC70L7QuiDRgSDRgdC40LzQstC+0LvQvtC8IFwiWFwiXG4gICAgICogXCIqXCIgLSDRgdC10YDRi9C5INCx0LvQvtC6INGBINGB0LjQvNCy0L7Qu9C+0LwgXCLil49cIlxuICAgICAqIDzRhtC40YTRgNCwPiAtINGB0LXRgNGL0Lkg0LHQu9C+0Log0YEg0LLQstC10LTQtdC90L3QvtC5INGG0LjRhNGA0L7QuVxuICAgICAqIDzQvdC1INGG0LjRhNGA0LA+IC0g0YHQuNC80LLQvtC7INC+0YLQvtCx0YDQsNC20LDQtdGC0YHRjyBcItC60LDQuiDQtdGB0YLRjFwiXG4gICAgICovXG4gICAgbWFzazogc3RyaW5nO1xufVxuXG5jbGFzcyBwaG9uZVZhbGlkYXRpb25Db21wb25lbnQgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG5cbiAgICAgICAgLy8g0JfQsNC00LDQtdC8INGI0LDQsdC70L7QvSwg0LIg0LrQvtGC0L7RgNGL0Lkg0LHRg9C00LXRgiDQv9C+0LzQtdGJ0LXQvSDQstCw0LvQuNC00LjRgNGD0LXQvNGL0Lkg0L3QvtC80LXRgFxuICAgICAgICB0aGlzLnRlbXBsYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGVtcGxhdGUnKS5pbm5lckhUTUwgPSBgXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwicGhvbmUtbW9kdWxlXCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInBob25lLW1vZHVsZV9fbnVtYmVyLXNlY3Rpb25cIj48L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicGhvbmUtbW9kdWxlX19lcnJvci1zZWN0aW9uXCI+PC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgYDtcblxuICAgICAgICB0aGlzLmF0dGFjaFNoYWRvdyh7IG1vZGU6IFwib3BlblwiIH0pO1xuXG4gICAgICAgIGlmICh0aGlzLnNoYWRvd1Jvb3QpIHtcbiAgICAgICAgICAgIHRoaXMuc2hhZG93Um9vdC5pbm5lckhUTUwgPSB0aGlzLnRlbXBsYXRlO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLl9udW1iZXJTZWN0aW9uID0gdGhpcy5zaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3IoJy5waG9uZS1tb2R1bGVfX251bWJlci1zZWN0aW9uJyk7XG4gICAgICAgICAgICB0aGlzLl9lcnJvclNlY3Rpb24gPSB0aGlzLnNoYWRvd1Jvb3QucXVlcnlTZWxlY3RvcignLnBob25lLW1vZHVsZV9fZXJyb3Itc2VjdGlvbicpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfbWFzayA6IHN0cmluZyA9ICcnO1xuICAgIHByaXZhdGUgX2NvcnJlY3ROdW1iZXIgOiBzdHJpbmcgPSAnKzcoOTg1KTA3Ny0qKi0qKic7XG4gICAgcHJpdmF0ZSBfaW5wdXRzTWFza0FyciA6IG51bWJlcltdID0gW107XG5cbiAgICBwcml2YXRlIF9udW1iZXJTZWN0aW9uIDogYW55O1xuICAgIHByaXZhdGUgX2Vycm9yU2VjdGlvbiA6IGFueTtcblxuICAgIHByaXZhdGUgdGVtcGxhdGUgOiBzdHJpbmc7XG5cbiAgICBwcml2YXRlIGxvZ2ljKCkgOiB2b2lkIHtcblxuICAgICAgICBjb25zb2xlLmxvZygnc3RlcCAyJyk7XG4gICAgICAgIGlmICh0aGlzLnNoYWRvd1Jvb3QpIHtcbiAgICAgICAgICAgIHRoaXMuX251bWJlclNlY3Rpb24gPSB0aGlzLnNoYWRvd1Jvb3QucXVlcnlTZWxlY3RvcignLnBob25lLW1vZHVsZV9fbnVtYmVyLXNlY3Rpb24nKTtcbiAgICAgICAgICAgIHRoaXMuX2Vycm9yU2VjdGlvbiA9IHRoaXMuc2hhZG93Um9vdC5xdWVyeVNlbGVjdG9yKCcucGhvbmUtbW9kdWxlX19lcnJvci1zZWN0aW9uJyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5fbnVtYmVyU2VjdGlvbikge1xuICAgICAgICAgICAgbGV0IGlkID0gMTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdzdGVwIDMnKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8g0JTQvtCx0LDQstC70Y/QtdC8INGP0YfQtdC50LrQuCDRgSDRgdC40LzQstC+0LvQsNC80LggLyDQuNC90L/Rg9GC0Ysg0LTQu9GPINCy0LDQu9C40LTQsNGG0LjQuFxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9tYXNrLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLl9tYXNrW2ldKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJysnOlxuICAgICAgICAgICAgICAgICAgICBjYXNlICcoJzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnKSc6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJy0nOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgY2VsbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2VsbC5jbGFzc05hbWUgPSAncGhvbmUtbW9kdWxlX19udW1iZXItc2VjdGlvbi1zeW1ib2wnO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2VsbC5pbm5lclRleHQgPSB0aGlzLl9tYXNrW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbnVtYmVyU2VjdGlvbi5hcHBlbmRDaGlsZChjZWxsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ0knOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgY2VsbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjZWxsLmNsYXNzTmFtZSA9ICdwaG9uZS1tb2R1bGVfX251bWJlci1zZWN0aW9uLWlucHV0JztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNlbGwuaWQgPSBTdHJpbmcoaWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2VsbC5wbGFjZWhvbGRlciA9ICdfJztcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX251bWJlclNlY3Rpb24uYXBwZW5kQ2hpbGQoY2VsbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9pbnB1dHNNYXNrQXJyLnB1c2goaSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZCsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnKic6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjZWxsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjZWxsLmNsYXNzTmFtZSA9ICdwaG9uZS1tb2R1bGVfX251bWJlci1zZWN0aW9uLWNlbGwnO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2VsbC5pbm5lclRleHQgPSAn4oCiJztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNlbGwuc3R5bGUuZm9udFNpemUgPSAnMjVweCc7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9udW1iZXJTZWN0aW9uLmFwcGVuZENoaWxkKGNlbGwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnWCc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjZWxsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjZWxsLmNsYXNzTmFtZSA9ICdwaG9uZS1tb2R1bGVfX251bWJlci1zZWN0aW9uLWNlbGwnO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2VsbC5pbm5lclRleHQgPSB0aGlzLl9tYXNrW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbnVtYmVyU2VjdGlvbi5hcHBlbmRDaGlsZChjZWxsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjZWxsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjZWxsLmNsYXNzTmFtZSA9ICdwaG9uZS1tb2R1bGVfX251bWJlci1zZWN0aW9uLWNlbGwnO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2VsbC5pbm5lclRleHQgPSB0aGlzLl9tYXNrW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbnVtYmVyU2VjdGlvbi5hcHBlbmRDaGlsZChjZWxsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgaW5wdXRzQXJyIDogQXJyYXk8SFRNTElucHV0RWxlbWVudD4gPSBbXTtcbiAgICAgICAgICAgIGxldCBpbnB1dHNDb2wgOiBudW1iZXIgPSBpZDtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDw9IGlkOyBpKyspIHtcbiAgICAgICAgICAgICAgICBsZXQgaW5wdXQgPSA8SFRNTElucHV0RWxlbWVudD5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChTdHJpbmcoaSkpO1xuICAgICAgICAgICAgICAgIGlmIChpbnB1dCkge1xuICAgICAgICAgICAgICAgICAgICBpbnB1dHNBcnIucHVzaChpbnB1dCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBsZXQgcmcgPSBuZXcgUmVnRXhwKCdeWzAtOV0rJCcpO1xuICAgICAgICAgICAgY29uc29sZS5sb2codGhpcy5fbWFzayk7XG5cbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW5wdXRzQXJyLmxlbmd0aDsgaSsrKSB7XG5cbiAgICAgICAgICAgICAgICBpbnB1dHNBcnJbaV0uYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCAoKSA9PiB7XG5cbiAgICAgICAgICAgICAgICAgICAgaW5wdXRzQXJyW2ldLmNsYXNzTmFtZSA9ICdwaG9uZS1tb2R1bGVfX251bWJlci1zZWN0aW9uLWlucHV0JztcblxuICAgICAgICAgICAgICAgICAgICBpZiAocmcudGVzdChpbnB1dHNBcnJbaV0udmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXRzQXJyW2ldLnZhbHVlLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dHNBcnJbaV0udmFsdWUgPSBpbnB1dHNBcnJbaV0udmFsdWVbaW5wdXRzQXJyW2ldLnZhbHVlLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChOdW1iZXIoaW5wdXRzQXJyW2ldLmlkKSkgPCBpbnB1dHNDb2wpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbmV4dElucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoU3RyaW5nKE51bWJlcihpbnB1dHNBcnJbaV0uaWQpICsgMSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZXh0SW5wdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dElucHV0LmZvY3VzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0c0FycltpXS5jbGFzc05hbWUgPT0gJ3Bob25lLW1vZHVsZV9fbnVtYmVyLXNlY3Rpb24taW5wdXQtZXJyb3InKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRzQXJyW2ldLmNsYXNzTmFtZSA9ICdwaG9uZS1tb2R1bGVfX251bWJlci1zZWN0aW9uLWlucHV0JztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGlucHV0c0FycltpXS52YWx1ZSwgcGFyc2VJbnQoaW5wdXRzQXJyW2ldLnZhbHVlKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXRzQXJyW2ldLnZhbHVlLmxlbmd0aCA+PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpc05hTihOdW1iZXIoaW5wdXRzQXJyW2ldLnZhbHVlKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2RhJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0c0FycltpXS52YWx1ZSA9IGlucHV0c0FycltpXS52YWx1ZVswXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGlucHV0c0FycltpXS52YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0c0FycltpXS52YWx1ZSA9IGlucHV0c0FycltpXS52YWx1ZVsxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dHNBcnJbaV0udmFsdWUgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnc3RlcCA0Jyk7XG4gICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlwcmVzcycsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdzdGVwIDU6JywgZXZlbnQua2V5Q29kZSk7XG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50LmtleUNvZGUgPT0gMTMpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2RhJyk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBlcnJDaGVjayA6IGJvb2xlYW4gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2Vycm9yU2VjdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZXJyb3JTZWN0aW9uLnRleHRDb250ZW50ID0gJyc7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGlucHV0c0NvbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGlucHV0ID0gPEhUTUxJbnB1dEVsZW1lbnQ+ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoU3RyaW5nKGkgKyAxKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC52YWx1ZSA9PSAnJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZXJyb3JTZWN0aW9uLnRleHRDb250ZW50ID0gJ9CS0YHQtSDQv9C+0LvRjyDQtNC+0LvQttC90Ysg0LHRi9GC0Ywg0LfQsNC/0L7Qu9C10L3Riyc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dC5jbGFzc05hbWUgPSAncGhvbmUtbW9kdWxlX19udW1iZXItc2VjdGlvbi1pbnB1dC1lcnJvcic7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0LnZhbHVlICE9IHRoaXMuX2NvcnJlY3ROdW1iZXJbdGhpcy5faW5wdXRzTWFza0FycltpXV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGlucHV0LCAnY3VyOiAnLCBpbnB1dC52YWx1ZSwgJ2lzdDogJywgdGhpcy5fY29ycmVjdE51bWJlclt0aGlzLl9pbnB1dHNNYXNrQXJyW2ldXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJDaGVjayA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXJyQ2hlY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGlucHV0c0NvbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpbnB1dCA9IDxIVE1MSW5wdXRFbGVtZW50PmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFN0cmluZyhpICsgMSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0LmNsYXNzTmFtZSA9ICdwaG9uZS1tb2R1bGVfX251bWJlci1zZWN0aW9uLWlucHV0LWVycm9yJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9lcnJvclNlY3Rpb24udGV4dENvbnRlbnQgPSAn0J3QtdCy0LXRgNC90YvQuSDQvdC+0LzQtdGALCDQv9C+0L/RgNC+0LHRg9C50YLQtSDQtdGJ0LUg0YDQsNC3JztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW5wdXRzQ29sOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGlucHV0ID0gPEhUTUxJbnB1dEVsZW1lbnQ+ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoU3RyaW5nKGkgKyAxKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQuY2xhc3NOYW1lID0gJ3Bob25lLW1vZHVsZV9fZXJyb3Itc2VjdGlvbi1pbnB1dC1zdWNjZXNzJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJyb290XCIsIHRoaXMuc2hhZG93Um9vdCwgXCJlbGVtXCIsIHRoaXMuX251bWJlclNlY3Rpb24pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHNldCBzZXRNYXNrKHByb3AgOiBQcm9wcykge1xuICAgICAgICB0aGlzLl9tYXNrID0gcHJvcC5tYXNrO1xuICAgICAgICBjb25zb2xlLmxvZyhcInN0ZXAxXCIpO1xuICAgICAgICB0aGlzLmxvZ2ljKCk7XG4gICAgfVxuICAgIGdldCBnZXRNYXNrKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbWFzaztcbiAgICB9XG59XG5jdXN0b21FbGVtZW50cy5kZWZpbmUoXCJwaG9uZS12YWxpZGF0aW9uXCIsIHBob25lVmFsaWRhdGlvbkNvbXBvbmVudCk7XG52YXIgYSA9IDxwaG9uZVZhbGlkYXRpb25Db21wb25lbnQ+ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJzcnKTtcbmlmIChhKSB7XG4gICAgbGV0IHAgPSB7XG4gICAgICAgIG1hc2s6ICcrNyg5ODUpMElJLSoqLSoqJ1xuICAgIH07XG4gICAgYS5zZXRNYXNrID0gcDtcbiAgICBjb25zb2xlLmxvZygnd3RmJyk7XG4gICAgLy8gYS5yZW5kZXIoKTtcbn1cbmVsc2Uge1xuICAgIGNvbnNvbGUubG9nKCdlcnInKTtcbn0iXSwic291cmNlUm9vdCI6IiJ9