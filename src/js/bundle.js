!function(e){var n={};function t(i){if(n[i])return n[i].exports;var s=n[i]={i:i,l:!1,exports:{}};return e[i].call(s.exports,s,s.exports,t),s.l=!0,s.exports}t.m=e,t.c=n,t.d=function(e,n,i){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:i})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(t.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var s in e)t.d(i,s,function(n){return e[n]}.bind(null,s));return i},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="",t(t.s=0)}([function(e,n,t){e.exports=t(1)},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});class i extends HTMLElement{constructor(){super(),this._mask="+X(XXX)XXX-XX-XX",this._correctNumber="+7(985)077-**-**",this._inputsMaskArr=[],this._template='\n            <style>\n                .phone-module {\n                    display: flex;\n                    flex-wrap: wrap;\n\n                    width: 370px;\n                    height: 50px;\n\n                    font-family: Arial, Helvetica, sans-serif;\n                    color: #333333;\n                    font-size: 20px;\n\n                    justify-content: space-around;\n                }\n\n                .phone-module__number-section {\n                    display: flex;\n                    flex-wrap: wrap;\n\n                    width: 100%;\n                    height: 35px;\n\n                    justify-content: space-around;\n                }\n\n                .phone-module__error-section {\n                    width: 100%;\n\n                    text-align: left;\n                    font-size: 14px;\n                    font-family: Arial, Helvetica, sans-serif;\n                    color: #ff1100;\n                }\n\n                .phone-module__number-section-symbol {\n                    text-align: center;\n                    line-height: 32px;\n\n                    width: 10px;\n                    height: 32px;\n\n                    border: none;\n                }\n\n                .phone-module__number-section-cell {\n                    width: 25px;\n                    height: 32px;\n\n                    text-align: center;\n                    line-height: 32px;\n\n                    background-color: #f0f0f0;\n\n                    margin: 2px;\n                    border-radius: 2px;\n                }\n\n                .phone-module__number-section-input,\n                .phone-module__number-section-input-error,\n                .phone-module__error-section-input-success {\n                    text-align: left;\n                    line-height: 32px;\n\n                    width: 25px;\n                    height: 32px;\n\n                    margin: 2px;\n                    padding-left: 6px;\n\n                    font-family: Arial, Helvetica, sans-serif;\n                    color: #333333;\n                    font-size: 20px;\n\n                    background-color: #ffffff;\n\n                    outline: none;\n\n                    border: 1px solid #f0f0f0;\n                    border-radius: 2px;\n\n                    transition: 0.1s linear;\n                }\n\n                .phone-module__number-section-input-error {\n                    border-color: #ff1100;\n                }\n\n                .phone-module__error-section-input-success {\n                    border-color: #00ff6a;\n                }\n\n                .phone-module__number-section-input:focus {\n                    border: 1px solid #858585;\n                    border-radius: 2px;\n\n                    transition: 0.1s linear;\n                }\n            </style>\n\n            <div class="phone-module">\n                <div class="phone-module__number-section"></div>\n                <div class="phone-module__error-section"></div>\n            </div>\n        ',this.attachShadow({mode:"open"}),this._inputsKol=0,this._inputsArr=[],this._state="none",this.shadowRoot&&(this.shadowRoot.innerHTML=this._template,this._numberSection=this.shadowRoot.querySelector(".phone-module__number-section"),this._errorSection=this.shadowRoot.querySelector(".phone-module__error-section")),this.logic()}performValidation(){let e=!1;if(this._errorSection){this._errorSection.textContent="";for(let n=0;n<this._inputsKol;n++)if(this.shadowRoot&&this._inputsArr[n]){if(""===this._inputsArr[n].value)return this._errorSection.textContent="Все поля должны быть заполены",void(this._inputsArr[n].className="phone-module__number-section-input-error");this._inputsArr[n].value!==this._correctNumber[this._inputsMaskArr[n]]&&(e=!0)}if(e){for(let e=0;e<this._inputsKol;e++)this.shadowRoot&&this._inputsArr[e]&&(this._inputsArr[e].className="phone-module__number-section-input-error");this._errorSection.textContent="Неверный номер, попробуйте еще раз"}else for(let e=0;e<this._inputsKol;e++)this.shadowRoot&&this._inputsArr[e]&&(this._inputsArr[e].className="phone-module__error-section-input-success")}}fill(){if(this._numberSection){this._numberSection.innerHTML="",this._errorSection.innerHTML="";for(let e=0;e<this._mask.length;e++)switch(this._mask[e]){case"+":case"(":case")":case"-":{const n=document.createElement("div");n.className="phone-module__number-section-symbol",n.innerText=this._mask[e],this._numberSection.appendChild(n);break}case"I":{const e=document.createElement("input");if(e.className="phone-module__number-section-input",e.id=String(this._inputsKol++),e.placeholder="_",this._numberSection.appendChild(e),this.shadowRoot){const e=this.shadowRoot.getElementById(String(this._inputsKol-1));this._inputsArr.push(e)}break}case"*":{const e=document.createElement("div");e.className="phone-module__number-section-cell",e.innerText="•",e.style.fontSize="25px",this._numberSection.appendChild(e);break}case"X":default:{const n=document.createElement("div");n.className="phone-module__number-section-cell",n.innerText=this._mask[e],this._numberSection.appendChild(n);break}}}}inputListener(){const e=new RegExp("^[0-9]+$");for(let n=0;n<this._inputsKol;n++)this._inputsArr[n]&&this._inputsArr[n].addEventListener("input",()=>{this._inputsArr[n].className="phone-module__number-section-input",e.test(this._inputsArr[n].value)?(this._inputsArr[n].value.length>1&&(this._inputsArr[n].value=this._inputsArr[n].value[this._inputsArr[n].value.length-1]),Number(this._inputsArr[n].id)<this._inputsKol-1&&this.shadowRoot&&this._inputsArr[n+1].focus(),"phone-module__number-section-input-error"===this._inputsArr[n].className&&(this._inputsArr[n].className="phone-module__number-section-input")):this._inputsArr[n].value.length>=2?isNaN(Number(this._inputsArr[n].value))?this._inputsArr[n].value=this._inputsArr[n].value[1]:this._inputsArr[n].value=this._inputsArr[n].value[0]:this._inputsArr[n].value=""})}enterListener(){this.shadowRoot&&document.addEventListener("keypress",e=>{13===e.keyCode&&this.performValidation()})}logic(){this.fill(),this.inputListener(),this.enterListener()}set setMask(e){this._mask=e.mask,this.logic()}set setCorrectMask(e){this._correctNumber=e.mask}get getMask(){return this._mask}get getInputsKol(){return this._inputsKol}get getCurrentState(){return this._state}get getInputsValues(){let e="";if(this.shadowRoot)for(let n=0;n<this._inputsKol;n++)this._inputsArr[n]&&(e+=this._inputsArr[n].value);return e}}n.PhoneValidationComponent=i,customElements.define("phone-validation",i);const s=document.getElementById("7");if(s){const e={mask:"+7(985)0II-**-**"};s.setMask=e}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,