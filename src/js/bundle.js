!function(e){var t={};function n(i){if(t[i])return t[i].exports;var s=t[i]={i:i,l:!1,exports:{}};return e[i].call(s.exports,s,s.exports,n),s.l=!0,s.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)n.d(i,s,function(t){return e[t]}.bind(null,s));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){e.exports=n(1)},function(e,t,n){"use strict";!function(){customElements.define("phone-validation",class extends HTMLElement{constructor(){super(),this._mask="+7(985)0II-**-**",this._correctNumber="+7(985)077-**-**",this._inputsMaskArr=[],this._inputsPrevValues=[],this._template=document.createElement("template"),this._template.innerHTML='\n                <style>\n                    :host {\n                    display: block;\n                    }\n            \n                    .phone-module {\n                        display: flex;\n                        flex-wrap: wrap;\n            \n                        width: 370px;\n                        height: 50px;\n            \n                        font-family: Arial, Helvetica, sans-serif;\n                        color: #333333;\n                        font-size: 20px;\n            \n                        justify-content: space-around;\n                    }\n            \n                    .phone-module__number-section {\n                        display: flex;\n                        flex-wrap: wrap;\n            \n                        width: 100%;\n                        height: 35px;\n            \n                        justify-content: space-around;\n                    }\n            \n                    .phone-module__error-section {\n                        width: 100%;\n            \n                        text-align: left;\n                        font-size: 14px;\n                        font-family: Arial, Helvetica, sans-serif;\n                        color: #ff1100;\n                    }\n            \n                    .phone-module__number-section-symbol {\n                        text-align: center;\n                        line-height: 32px;\n            \n                        width: 10px;\n                        height: 32px;\n            \n                        border: none;\n                    }\n            \n                    .phone-module__number-section-cell {\n                        width: 25px;\n                        height: 32px;\n            \n                        text-align: center;\n                        line-height: 32px;\n            \n                        background-color: #f0f0f0;\n            \n                        margin: 2px;\n                        border-radius: 2px;\n                    }\n            \n                    .phone-module__number-section-input,\n                    .phone-module__number-section-input-error,\n                    .phone-module__error-section-input-success {\n                        text-align: left;\n                        line-height: 32px;\n            \n                        width: 17px;\n                        height: 28px;\n            \n                        margin: 2px;\n                        padding-left: 6px;\n            \n                        font-family: Arial, Helvetica, sans-serif;\n                        color: #333333;\n                        font-size: 20px;\n            \n                        background-color: #ffffff;\n            \n                        outline: none;\n            \n                        border: 1px solid #f0f0f0;\n                        border-radius: 2px;\n            \n                        transition: 0.1s linear;\n                    }\n            \n                    .phone-module__number-section-input:hover {\n                        border-color: #c2c2c2;\n                    }\n            \n                    .phone-module__number-section-input-error {\n                        border-color: #ff1100;\n                    }\n            \n                    .phone-module__error-section-input-success {\n                        border-color: #00ff6a;\n                    }\n            \n                    .phone-module__number-section-input:focus {\n                        border: 1px solid #858585;\n                        border-radius: 2px;\n            \n                        transition: 0.1s linear;\n                    }\n                </style>\n            \n                <div class="phone-module">\n                    <div class="phone-module__number-section"></div>\n                    <div class="phone-module__error-section"></div>\n                </div>   \n            ',this.attachShadow({mode:"open"}),this._width=0,this._inputsKol=0,this._inputsArr=[],this._mode="fetch",this._path="http://localhost:3000/api/fetch",this.shadowRoot&&(this.shadowRoot.appendChild(this._template.content.cloneNode(!0)),this._mainDiv=this.shadowRoot.querySelector(".phone-module"),this._numberSection=this.shadowRoot.querySelector(".phone-module__number-section"),this._errorSection=this.shadowRoot.querySelector(".phone-module__error-section")),this.logic()}performValidation(){this._errorSection.innerHTML="";let e=!1;if(this._errorSection){this._errorSection.textContent="";for(let t=0;t<this._inputsKol;t++)if(this.shadowRoot&&this._inputsArr[t]){if(""===this._inputsArr[t].value)return this._errorSection.textContent="Все поля должны быть заполены",void(this._inputsArr[t].className="phone-module__number-section-input-error");this._inputsArr[t].value!==this._correctNumber[this._inputsMaskArr[t]]&&(e=!0)}if(e){for(let e=0;e<this._inputsKol;e++)this.shadowRoot&&this._inputsArr[e]&&(this._inputsArr[e].className="phone-module__number-section-input-error");this._errorSection.textContent="Неверный номер, попробуйте еще раз"}else for(let e=0;e<this._inputsKol;e++)this.shadowRoot&&this._inputsArr[e]&&(this._inputsArr[e].className="phone-module__error-section-input-success")}}setCurrentState(e,t){if(e){if(this.shadowRoot&&this._errorSection){this._errorSection.innerText=t;for(let e=0;e<this._inputsKol;e++)this._inputsArr[e].className="phone-module__number-section-input-error"}}else if(this.shadowRoot&&this._errorSection){this._errorSection.innerText="";for(let e=0;e<this._inputsKol;e++)this._inputsArr[e].className="phone-module__error-section-input-success"}}fill(){if(this._numberSection.innerHTML="",this._width=0,this._numberSection){this._numberSection.innerHTML="",this._errorSection.innerHTML="";for(let e=0;e<this._mask.length;e++)switch(this._mask[e]){case"+":case"(":case")":case"-":{const t=document.createElement("div");t.className="phone-module__number-section-symbol",t.innerText=this._mask[e],this._numberSection.appendChild(t),this._width+=10;break}case"I":{const t=document.createElement("input");if(t.className="phone-module__number-section-input",t.id=String(this._inputsKol++),t.placeholder="_",this._inputsMaskArr.push(e),this._inputsPrevValues.push(""),this._numberSection.appendChild(t),this.shadowRoot){const e=this.shadowRoot.getElementById(String(this._inputsKol-1));this._inputsArr.push(e)}this._width+=29;break}case"*":{const e=document.createElement("div");e.className="phone-module__number-section-cell",e.innerText="•",e.style.fontSize="25px",this._numberSection.appendChild(e),this._width+=29;break}case"X":default:{const t=document.createElement("div");t.className="phone-module__number-section-cell",t.innerText=this._mask[e],this._numberSection.appendChild(t),this._width+=29;break}}}this._mainDiv.style.width=String(this._width+1)+"px"}inputListener(){new RegExp("^[0-9]+$");for(let e=0;e<this._inputsKol;e++)this._inputsArr[e]&&this._inputsArr[e].addEventListener("input",()=>{this._inputsArr[e].className="phone-module__number-section-input",this._inputsArr[e].value=this._inputsArr[e].value.replace(/[^+\d]/g,""),""!==this._inputsArr[e].value&&(this._inputsArr[e].value.length>1?(this._inputsArr[e].value.length>1&&(this._inputsArr[e].value[1]!==this._inputsPrevValues[e]?(this._inputsPrevValues[e]=this._inputsArr[e].value[1],this._inputsArr[e].value=this._inputsArr[e].value[1]):(this._inputsPrevValues[e]=this._inputsArr[e].value[0],this._inputsArr[e].value=this._inputsArr[e].value[0])),"phone-module__number-section-input-error"===this._inputsArr[e].className&&(this._inputsArr[e].className="phone-module__number-section-input")):this._inputsPrevValues[e]=this._inputsArr[e].value,Number(this._inputsArr[e].id)<this._inputsKol-1&&""!==this._inputsArr[e].value&&this.shadowRoot&&this._inputsArr[e+1].focus())})}enterListener(){this.shadowRoot&&document.addEventListener("keypress",e=>{13===e.keyCode&&this.performValidation()})}logic(){this.fill(),this.inputListener(),this.enterListener()}set setMask(e){this._mask=e.mask,this.logic()}set setCorrectMask(e){this._correctNumber=e.mask}get getAllComponentValues(){if(this._numberSection)for(let e=0;e<this._numberSection.children.length;e++)console.log(typeof this._numberSection.children[e]);return""}get getMask(){return this._mask}get getInputsKol(){return this._inputsKol}get getCurrentState(){return this._errorSection?this._errorSection.innerText:"none"}get getInputsValues(){let e="";if(this.shadowRoot)for(let t=0;t<this._inputsKol;t++)this._inputsArr[t]&&(e+=this._inputsArr[t].value);return e}});const e=document.getElementById("7");if(e){const t={mask:"+7(985)0II-**-**"};e.setMask=t}}()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,